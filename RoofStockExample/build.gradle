apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'eclipse'





repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.11.7'
    testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.1.+'
}


sourceSets {
    test {
        scala {
            srcDir 'src'
        }
    }
}


//Task Run all Gatling Tests
task gatling(dependsOn: 'compileTestScala') << {

    def absPath = System.getProperty("user.dir");

    // target/test-classes is required by gatling to be run
    def targetTestClassesFolder = new File(absPath, 'target/test-classes')
    targetTestClassesFolder.mkdirs()

    // create build/reports folder
    def targetReportsFolder = new File(project.buildDir.absolutePath, '/reports')
    targetReportsFolder.mkdirs()


    logger.lifecycle(" ---- Executing all Gatling Simulations from: ${sourceSets.test.output.classesDir} ----")

    sourceSets.test.output.classesDir.eachFileRecurse { file ->
        if (file.isFile()) {

            def gatlingScenarioClass = (file.getPath() - (sourceSets.test.output.classesDir.getPath() + File.separator) - '.class')
                    .replace(File.separator, '.')

            def foundGatlingSim = gatlingScenarioClass.lastIndexOf("Simulation");

            if (foundGatlingSim > 0) {
                javaexec {
                    main = 'io.gatling.app.Gatling'
                    classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
                    args '-sf', sourceSets.test.output.classesDir,
                            '-s', gatlingScenarioClass,
                            '-rf', project.buildDir.absolutePath + '/reports/'
                }
            }
        }
    }


    logger.lifecycle(" ---- Done executing all Gatling scenarios ----")
}